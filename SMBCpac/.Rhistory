load("/Users/jclee/Dropbox/00000 SMBC/prof Sato SMBC(令和元年6月3日(月))/2019_12_20_ analysis5/Shiga_017/Shiga_016 ppt作業/a2.Rdata")
ls()
dim(d.complete)
install.packages("SMBCpac_0.1.0.tar.gz", repos = NULL)
library(randomForest)
install.packages("randomForest")
install.packages("SMBCpac_0.1.0.tar.gz", repos = NULL)
SMBCpac::smbc
help(smbc)
ls()
remove.packages("SMBCpac")
install.packages("SMBCpac_0.1.0.tar.gz", repos = NULL)
library(SMBCpac)
suppressMessages(library(randomForest))
suppressMessages(library(tidyverse))
help(smbc)
help(smbc.test)
help(smbc.train)
smbc.rf.train$importance %>% tbl_df() %>% mutate(var=colnames(smbc.train)[-1]) %>% arrange(desc(MeanDecreaseGini)) %>% knitr::kable()
library(knitr)
smbc.rf.train$importance %>% tbl_df() %>% mutate(var=colnames(smbc.train)[-1]) %>% arrange(desc(MeanDecreaseGini)) %>% knitr::kable()
smbc.rf.train$importance %>% tbl_df() %>% mutate(var=colnames(smbc.train)[-1]) %>% arrange(desc(MeanDecreaseGini))
smbc.train
smbc.train
smbc.test
smbc.train
smbc
str(smbc)
par(family= "HiraKakuProN-W3")
varImpPlot(smbc.rf.train)
Predicted.test %>% tbl_df()
Predicted.train %>% tbl_df()
smbc
colnames(smbc)
colnames(smbc)[3]
colnames(smbc)[4]
colnames(smbc)[4] %>% iconv("utf8", "cp932")
colnames(smbc) %>% iconv("utf8", "cp932")
library(magrittr)
colnames(smbc) %<>% iconv("utf8", "cp932")
colnames(smbc.test) %<>% iconv("utf8", "cp932")
colnames(smbc.train) %<>% iconv("utf8", "cp932")
colnames(smbc)
help(smbc)
help(smbc.test)
help(smbc.train)
smbc.rf.train$importance %>% tbl_df() %>% mutate(var=colnames(smbc.train)[-1]) %>% arrange(desc(MeanDecreaseGini)) %>% knitr::kable()
par(family= "HiraKakuProN-W3")
varImpPlot(smbc.rf.train)
varImpPlot(smbc.rf.train)
smbc.rf.train
varImpPlot(smbc.rf.train)
Predicted.test %>% tbl_df()
Predicted.train %>% tbl_df()
library(pROC)
# rf 訓練データ
roc(
smbc.test$y ~ Predicted.test[,2],
plot = T,
print.auc = T,
col = "orange",
# add = T,
print.auc.y = 0.4,
print.auc.x = 1
)
install.packages("pROC")
library(pROC)
# rf 訓練データ
roc(
smbc.test$y ~ Predicted.test[,2],
plot = T,
print.auc = T,
col = "orange",
# add = T,
print.auc.y = 0.4,
print.auc.x = 1
)
# rf 評価データ
roc(
smbc.train$y ~ Predicted.train[,2],
plot = T,
print.auc = T,
col = "grey",
add = T,
print.auc.y = 0.3,
print.auc.x = 1
)
legend("bottomright", legend = c("RF.test", "RF.train"),
col = c("orange", "grey"), lwd=4)
str(smbc.rf.train)
smbc.rf.train$importance
smbc.rf.train$importance$ex
smbc.rf.train$importance %>% names()
smbc.rf.train$importance %>% row.names()
row.names(smbc.rf.train$importance) %<>% iconv("utf8", "cp932")
smbc.rf.train$importance
par(family= "HiraKakuProN-W3")
varImpPlot(smbc.rf.train)
install.packages("SMBCpac_0.1.0.tar.gz", repos = NULL)
help(smbc)
source('~/toy/SMBCpac/送付 code for mac.R', echo=TRUE)
library(SMBCpac)
library(randomForest)
library(tidyverse)
library(magrittr)
library(pROC)
help(smbc)
help(smbc.test)
help(smbc.train)
help(smbc)
help(smbc.test)
help(smbc.train)
smbc.rf.train$importance %>% tbl_df() %>% mutate(var=colnames(smbc.train)[-1]) %>% arrange(desc(MeanDecreaseGini)) %>% knitr::kable()
par(family= "HiraKakuProN-W3")
varImpPlot(smbc.rf.train)
source('~/toy/SMBCpac/送付 code for mac.R', echo=TRUE)
roc(
smbc.test$y ~ Predicted.test[,2],
plot = T,
print.auc = T,
col = "orange",
# add = T,
print.auc.y = 0.4,
print.auc.x = 1
)
# rf 評価データ
roc(
smbc.train$y ~ Predicted.train[,2],
plot = T,
print.auc = T,
col = "grey",
add = T,
print.auc.y = 0.3,
print.auc.x = 1
)
legend("bottomright", legend = c("RF.test", "RF.train"),
col = c("orange", "grey"), lwd=4)
# ROC curve -----------------------------------------------------------------
roc(
smbc.test$y ~ Predicted.test[,2],
plot = T,
print.auc = T,
col = "orange",
# add = T,
print.auc.y = 0.4,
print.auc.x = 1
)
# rf 評価データ
roc(
smbc.train$y ~ Predicted.train[,2],
plot = T,
print.auc = T,
col = "grey",
add = T,
print.auc.y = 0.3,
print.auc.x = 1
)
legend("bottomright", legend = c("RF.test", "RF.train"),
col = c("orange", "grey"), lwd=4)
roc(
smbc.test$y ~ Predicted.test[,2],
plot = T,
print.auc = T,
col = "orange",
# add = T,
print.auc.y = 0.4,
print.auc.x = 1
)
# rf 評価データ
roc(
smbc.train$y ~ Predicted.train[,2],
plot = T,
print.auc = T,
col = "grey",
add = T,
print.auc.y = 0.3,
print.auc.x = 1
)
legend("bottomright", legend = c("RF.test", "RF.train"),
col = c("orange", "grey"), lwd=4)
# set.seed(0) #乱数に再現性があるように初期値を固定
# index <- sample(1:nrow(smbc), round(nrow(smbc) * 0.6)) #6割で訓練、4割で評価
#
# # 訓練データ
# smbc.train <- smbc[index, ]
# smbc.test <- smbc[-index, ]
legend("bottomright", legend = c("RF.test", "RF.train"),
col = c("orange","grey"), lwd=4)
Predicted.test[,2]
smbc.test$y
index
help(smbc)
library(SMBCpac)
help(smbc)
help(smbc.test)
install.packages("SMBCpac_0.1.0.tar.gz", repos = NULL)
install.packages("SMBCpac_0.1.0.tar.gz", repos = NULL)
install.packages("SMBCpac_0.1.0.tar.gz", repos = NULL)
