plot_ly() %>%
add_histogram(x=~cut, color=~clarity)
## Create a heatmap
diamonds %>%
plot_ly() %>%
add_heatmap(x=~cut, y=~color, z=~price)
storms %>%
count(year, status) %>%
plot_ly(y=~status, x =~n, color=~status) %>%
add_bars(frame=~year) %>%
layout(barmode="stack")
# library(plotly)
# Line chart of storms by year
storms %>%
count(year, status) %>%
plot_ly(x=~year, y=~n) %>%
add_lines(color=~status)
storms %>% count(year) %>% split(.$year) %>%
accumulate(~bind_rows(.x, .y)) %>%
set_names(1975:2015) %>% # optional
bind_rows(.id="年") %>%
plot_ly(x=~year, y=~n) %>%
add_lines(frame=~年)
storms %>%
count(year, category) %>%
split(.$year) %>%
accumulate(~bind_rows(.x, .y)) %>%
set_names(1975:2015) %>% # optional
bind_rows(.id="frame") %>%
plot_ly(x=~year, y=~n) %>%
add_lines(frame=~frame, color=~category, ids=~category)
storms %>%
count(year, status) %>%
split(.$year) %>%
accumulate(~bind_rows(.x, .y)) %>%
set_names(1975:2015) %>% # optional
bind_rows(.id="frame") %>%
plot_ly(x=~year, y=~n) %>%
add_lines(frame=~frame, color=~status, ids=~status)
## Scatter plot for a specific year 2002
gapminder %>%
filter(year == 2002) %>%  # filter data for the year 2002
plot_ly() %>%
add_markers(x =  ~ gdpPercap, y =  ~ lifeExp) %>%
## Add title to the plot, and axis. Apply log transformation to the x axis
layout(
title = "Plotly Scatter Plot",
xaxis = list(title = "GDP Per Capita (log scale)", type = "log"),
yaxis = list(title = "Life Expectancy")
)
# %>%
#   hide_legend()
## Scatter plot for a specific year 2002
gapminder %>%
filter(year == 2002) %>%  # filter data for the year 2002
plot_ly() %>%
add_markers(x =  ~ gdpPercap, y =  ~ lifeExp) %>%
## Add title to the plot, and axis. Apply log transformation to the x axis
layout(
title = "Plotly Scatter Plot",
xaxis = list(title = "GDP Per Capita (log scale)", type = "log"),
yaxis = list(title = "Life Expectancy")
) %>%
hide_legend()
# 使用package
# suppressMessages(library(readxl))
# suppressMessages(library(dplyr))
# suppressMessages(library(data.table))
# suppressMessages(library(kableExtra))
# suppressMessages(library(curl))
suppressMessages(library(tidyverse))
x <- 2
x
x + x
exp(-2)
log(10)
iris %>% head(2)
iris %>% tail(2)
iris$Sepal.Length
library(gapminder) # to access gapminder dataset
suppressMessages(library(plotly)) # for plotly charts, pipe % operator
library(dplyr) # for any data manipulation operations; we used
# suppressMessages(library(tidyverse))
gapminder %>% str()
gapminder %>% dim()
gapminder$year %>% table()
gapminder %>% summary()
gapminder2002 <- gapminder %>% filter(year == 2002)
plot(log(gapminder2002$gdpPercap), gapminder2002$lifeExp)
str(mtcars)
help("mtcars")
str(mtcars)
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
## below 3 lines for the bar label and hover text
textposition = "outside",
hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n),
hoverinfo = "text") %>%  # apply plotly on the frequency data
add_bars(width=0.2) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
# How about making a horizontal bar chart
# interchange the x and y variables
######## Load required packages
library(plotly) # for Plotly charts
library(dplyr) # for pipe operator and data manipulation operations
## Side by Side or Grouped Bar Chart
mtcars %>%
mutate(cyl = as.factor(cyl),
am = as.factor(am)) %>% # Data type conversion
count(cyl, am) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~am,
text = ~n,
textposition = "outside",
hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n, "<br>", "Transmission=", am),
hoverinfo = "text") %>%
add_bars() %>%
layout(title="Plotly Grouped Bar Chart",
xaxis = list(title="No. of Cylinders"),
yaxis = list(title = "Count"),
barmode="group")
######## Load required packages
library(plotly) # for Plotly charts
library(dplyr) # for pipe operator and data manipulation operations
## Stacked Bar chart
mtcars %>%
mutate(cyl = as.factor(cyl),
am = as.factor(am)) %>%
count(cyl, am) %>% ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~am,
text = ~paste("No. of cyl=", cyl, "<br>", "Count=", n, "<br>", "Transmission=", am),
hoverinfo = "text") %>%
add_bars() %>%
layout(title="Plotly Stacked Bar Chart",
xaxis = list(title="No. of Cylinders"),
yaxis = list(title = "Count"),
barmode="stack")
library(plotly)
library(ggplot2) # for diamonds dataset
diamonds %>%
plot_ly() %>%
add_histogram(x=~price)
# Histogram with categorical variable
diamonds %>%
plot_ly() %>%
add_histogram(x=~cut)
diamonds %>%
plot_ly() %>%
add_histogram(x=~cut, color=~clarity)
## Create a heatmap
diamonds %>%
plot_ly() %>%
add_heatmap(x=~cut, y=~color, z=~price)
storms %>%
count(year, status) %>%
plot_ly(y=~status, x =~n, color=~status) %>%
add_bars(frame=~year) %>%
layout(barmode="stack")
# library(plotly)
# Line chart of storms by year
storms %>%
count(year, status) %>%
plot_ly(x=~year, y=~n) %>%
add_lines(color=~status)
storms %>% count(year) %>% split(.$year) %>%
accumulate(~bind_rows(.x, .y)) %>%
set_names(1975:2015) %>% # optional
bind_rows(.id="年") %>%
plot_ly(x=~year, y=~n) %>%
add_lines(frame=~年)
storms %>%
count(year, category) %>%
split(.$year) %>%
accumulate(~bind_rows(.x, .y)) %>%
set_names(1975:2015) %>% # optional
bind_rows(.id="frame") %>%
plot_ly(x=~year, y=~n) %>%
add_lines(frame=~frame, color=~category, ids=~category)
storms %>%
count(year, status) %>%
split(.$year) %>%
accumulate(~bind_rows(.x, .y)) %>%
set_names(1975:2015) %>% # optional
bind_rows(.id="frame") %>%
plot_ly(x=~year, y=~n) %>%
add_lines(frame=~frame, color=~status, ids=~status)
## Scatter plot for a specific year 2002
gapminder %>%
filter(year == 2002) %>%  # filter data for the year 2002
plot_ly() %>%
add_markers(x =  ~ gdpPercap, y =  ~ lifeExp) %>%
## Add title to the plot, and axis. Apply log transformation to the x axis
layout(
title = "Plotly Scatter Plot",
xaxis = list(title = "GDP Per Capita (log scale)", type = "log"),
yaxis = list(title = "Life Expectancy")
) %>%
hide_legend()
gapminder %>%
plot_ly() %>%
# add frame argument for animation and map to the variable needed on the timeline
add_markers(x=~gdpPercap, y=~lifeExp,
frame=~year,
text=~paste("Life Expectancy: ", round(lifeExp,1),
"<br>",
"GDP Per Capita:", round(gdpPercap,1),
"<br>",
"Country:", country),
hoverinfo= "text") %>%
layout(title="Animated Plotly Scatter Plot",
xaxis=list(title="GDP Per Capita (log scale)(一人当たりGDP)", type="log"),
yaxis=list(title= "Life Expectancy(平均寿命)")) %>%
hide_legend()
gapminder %>%
plot_ly() %>%
# add frame argument for animation and map to the variable needed on the timeline
add_markers(x=~gdpPercap, y=~lifeExp,
frame=~year,
text=~paste(
# "Life Expectancy: ", round(lifeExp,1),
#           "<br>",
#           "GDP Per Capita:", round(gdpPercap,1),
#           "<br>",
"Country:", country),
hoverinfo= "text") %>%
layout(title="Animated Plotly Scatter Plot",
xaxis=list(title="GDP Per Capita (log scale)(一人当たりGDP)", type="log"),
yaxis=list(title= "Life Expectancy(平均寿命)")) %>%
hide_legend()
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl)
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
# ,
# ## below 3 lines for the bar label and hover text
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n),
hoverinfo = cyl) %>%  # apply plotly on the frequency data
add_bars(width=0.2) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
# ,
# ## below 3 lines for the bar label and hover text
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n),
hoverinfo = "cyl") %>%  # apply plotly on the frequency data
add_bars(width=0.2) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
# How about making a horizontal bar chart
# interchange the x and y variables
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
# ,
# ## below 3 lines for the bar label and hover text
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n),
hoverinfo = "n") %>%  # apply plotly on the frequency data
add_bars(width=0.2) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
# ,
# ## below 3 lines for the bar label and hover text
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n),
hoverinfo = "cyl") %>%  # apply plotly on the frequency data
add_bars(width=0.2) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
# ,
# ## below 3 lines for the bar label and hover text
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n),
hoverinfo = "text") %>%  # apply plotly on the frequency data
add_bars(width=0.2) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
# text = ~n,
# ,
# ## below 3 lines for the bar label and hover text
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n),
hoverinfo = n) %>%  # apply plotly on the frequency data
add_bars(width=0.2) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
# text = ~n,
# ,
# ## below 3 lines for the bar label and hover text
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n),
hoverinfo = "n") %>%  # apply plotly on the frequency data
add_bars(width=0.2) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
# ,
# ## below 3 lines for the bar label and hover text
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n),
hoverinfo = "text") %>%  # apply plotly on the frequency data
add_bars(width=0.2) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
hoverinfo = "text") %>%  # apply plotly on the frequency data
add_bars(width=0.3) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
hoverinfo = "text") %>%  # apply plotly on the frequency data
add_bars(width=1) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
hoverinfo = "text") %>%  # apply plotly on the frequency data
add_bars(width=0.3) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%  # convert cyl to categorical variable
count(cyl) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~cyl,
text = ~n,
hoverinfo = "text") %>%  # apply plotly on the frequency data
add_bars(width=0.3) %>%  # use the width argument to adjust the width of the bars
layout(title="Plotly Bar Chart using mtcars data",
xaxis = list(title="No. of Cylinders "),
yaxis = list(title = "Count"))
```{r, echo=TRUE, warning=FALSE, fig.width=5}
## Side by Side or Grouped Bar Chart
mtcars %>%
mutate(cyl = as.factor(cyl),
am = as.factor(am)) %>% # Data type conversion
count(cyl, am) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~am,
text = ~n,
textposition = "outside",
hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n, "<br>", "Transmission=", am),
hoverinfo = "text") %>%
add_bars() %>%
layout(title="Plotly Grouped Bar Chart",
xaxis = list(title="No. of Cylinders"),
yaxis = list(title = "Count"),
barmode="group")
# library(plotly) # for Plotly charts
## Side by Side or Grouped Bar Chart
mtcars %>%
mutate(cyl = as.factor(cyl),
am = as.factor(am)) %>% # Data type conversion
count(cyl, am) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~am,
text = ~n,
textposition = "outside",
hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n, "<br>", "Transmission=", am),
hoverinfo = "text") %>%
add_bars() %>%
layout(title="Plotly Grouped Bar Chart",
xaxis = list(title="No. of Cylinders"),
yaxis = list(title = "Count"),
barmode="group")
## Side by Side or Grouped Bar Chart
mtcars %>%
mutate(cyl = as.factor(cyl),
am = as.factor(am)) %>% # Data type conversion
count(cyl, am) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~am,
text = ~n,
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n, "<br>", "Transmission=",
am),
## Side by Side or Grouped Bar Chart
mtcars %>%
mutate(cyl = as.factor(cyl),
am = as.factor(am)) %>% # Data type conversion
count(cyl, am) %>%  ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~am,
text = ~n,
# textposition = "outside",
# hovertext = ~paste("No. of cyl=", cyl, "\n", "Count=", n, "<br>", "Transmission=",
#                    am),
hoverinfo = "text") %>%
add_bars() %>%
layout(title="Plotly Grouped Bar Chart",
xaxis = list(title="No. of Cylinders"),
yaxis = list(title = "Count"),
barmode="group")
## Stacked Bar chart
mtcars %>%
mutate(cyl = as.factor(cyl),
am = as.factor(am)) %>%
count(cyl, am) %>% ## count to get the frequency table (from dplyr package)
plot_ly(x=~cyl,
y=~n,
color=~am,
text = ~paste("No. of cyl=", cyl, "<br>", "Count=", n, "<br>", "Transmission=", am),
hoverinfo = "text") %>%
add_bars() %>%
layout(title="Plotly Stacked Bar Chart",
xaxis = list(title="No. of Cylinders"),
yaxis = list(title = "Count"),
barmode="stack")
storms$status
storms$status %>% table()
storms %>% count(year, category) %>% split(.$year) %>% accumulate(~bind_rows(.x, .y))
storms %>% count(year, category) %>% split(.$year)
storms %>% count(year, category) %>%
storms %>% count(year, category)
storms %>% count(year, category)
source('~/.active-rstudio-document', echo=TRUE)
system("open .")
knitr::include_graphics('QR_964656.png')
knitr::include_graphics('QR_964656.png')
